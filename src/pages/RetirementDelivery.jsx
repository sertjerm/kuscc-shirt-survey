import React, { useState, useEffect } from "react";
import {
  Card,
  Form,
  Radio,
  Input,
  Button,
  Typography,
  Space,
  message,
  Spin,
} from "antd";
import {
  HomeOutlined,
  EnvironmentOutlined,
  EditOutlined,
  CheckCircleOutlined,
  LoadingOutlined,
} from "@ant-design/icons";
import { useAppContext } from "../App";
import {
  saveDeliveryPreference,
  getDeliveryPreference,
  formatDeliveryData,
} from "../services/shirtApi";
import Swal from "sweetalert2";

const { Title, Text } = Typography;
const { TextArea } = Input;

const RetirementDelivery = () => {
  const [form] = Form.useForm();
  const [selectedOption, setSelectedOption] = useState("coop");
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å user context)
  const { user } = useAppContext();

  // üîç Debug log
  console.log("üë§ User data from context:", user);
  console.log("üè† ADDR field:", user?.ADDR);

  const systemAddress = user?.ADDR || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";

  // ‚ö° ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  useEffect(() => {
    const loadExistingPreference = async () => {
      if (!user?.memberCode) {
        setInitialLoading(false);
        return;
      }

      try {
        console.log("üîÑ Loading existing delivery preference...");
        const rawData = await getDeliveryPreference(user.memberCode);

        if (rawData) {
          const preference = formatDeliveryData(rawData);
          console.log("üìã Found existing preference:", preference);

          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
          setSelectedOption(preference.deliveryOption);
          form.setFieldsValue({
            deliveryOption: preference.deliveryOption,
            customAddress: preference.deliveryAddress,
            customPhone: preference.deliveryPhone,
          });

          message.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß");
        } else {
          console.log("‚ÑπÔ∏è No existing preference found");
        }
      } catch (error) {
        console.error("‚ùå Error loading preference:", error);
        message.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ");
      } finally {
        setInitialLoading(false);
      }
    };

    loadExistingPreference();
  }, [user?.memberCode, form]);

  const handleSubmit = async (values) => {
    if (!user?.memberCode) {
      message.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      return;
    }

    try {
      // üéØ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á
      let addressToShow = "";
      let deliveryMethod = "";
      let addressToSave = null;
      let phoneToSave = null;

      if (values.deliveryOption === "coop") {
        deliveryMethod = "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå";
        addressToShow = "‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏à‡∏≥‡∏Å‡∏±‡∏î";
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
      } else if (values.deliveryOption === "system") {
        deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö";
        addressToShow = systemAddress;
        addressToSave = systemAddress;
        phoneToSave = user.phone;
      } else if (values.deliveryOption === "custom") {
        deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà";
        addressToShow = `${values.customAddress}\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${values.customPhone}`;
        addressToSave = values.customAddress;
        phoneToSave = values.customPhone;
      }

      // üöÄ ‡πÅ‡∏™‡∏î‡∏á SweetAlert Confirmation
      const confirmResult = await Swal.fire({
        title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
        html: `
          <div style="text-align: left; margin: 20px 0;">
            <p style="margin: 10px 0;"><strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</strong></p>
            <p style="color: #1E88E5; font-weight: 500; margin-bottom: 15px;">${deliveryMethod}</p>
            
            <p style="margin: 10px 0;"><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</strong></p>
            <div style="
              background: #f8f9fa; 
              padding: 12px; 
              border-radius: 8px; 
              border-left: 4px solid #1E88E5;
              white-space: pre-line;
              font-size: 14px;
              line-height: 1.5;
            ">${addressToShow}</div>
          </div>
        `,
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#1E88E5",
        cancelButtonColor: "#6c757d",
        confirmButtonText: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
        cancelButtonText: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        customClass: {
          popup: "swal-wide",
        },
        reverseButtons: true,
      });

      // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      if (!confirmResult.isConfirmed) {
        return;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
      setLoading(true);

      console.log("üì¶ Saving delivery preference...");

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
      const saveData = {
        memberCode: user.memberCode,
        deliveryOption: values.deliveryOption,
        deliveryAddress: addressToSave,
        deliveryPhone: phoneToSave,
      };

      console.log("üíæ Save payload:", saveData);

      const saveResult = await saveDeliveryPreference(saveData);
      console.log("‚úÖ Save result:", saveResult);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await Swal.fire({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
        text: "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        icon: "success",
        confirmButtonColor: "#1E88E5",
        confirmButtonText: "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß",
      });

      // TODO: Navigate ‡∏´‡∏£‡∏∑‡∏≠ callback
      // navigate('/member');
    } catch (error) {
      console.error("‚ùå Error saving delivery option:", error);

      await Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        icon: "error",
        confirmButtonColor: "#dc3545",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    } finally {
      setLoading(false);
    }
  };

  const deliveryOptions = [
    {
      value: "coop",
      icon: <HomeOutlined style={{ fontSize: 28 }} />,
      label: "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå",
      description: "‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå",
    },
    {
      value: "system",
      icon: <EnvironmentOutlined style={{ fontSize: 28 }} />,
      label: "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
      description: "‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ",
      address: systemAddress,
    },
    {
      value: "custom",
      icon: <EditOutlined style={{ fontSize: 28 }} />,
      label: "‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà",
      description: "‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á",
    },
  ];

  // ‡πÅ‡∏™‡∏î‡∏á Loading Screen ‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
  if (initialLoading) {
    return (
      <div
        style={{
          minHeight: "100vh",
          background: "linear-gradient(180deg, #4A9FE8 0%, #5AB9EA 100%)",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Card
          style={{
            padding: "40px",
            borderRadius: "24px",
            background: "rgba(255, 255, 255, 0.95)",
            textAlign: "center",
          }}
        >
          <Spin
            indicator={<LoadingOutlined style={{ fontSize: 32 }} spin />}
            size="large"
          />
          <div style={{ marginTop: "16px", fontSize: "16px", color: "#666" }}>
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        background: "linear-gradient(180deg, #4A9FE8 0%, #5AB9EA 100%)",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "20px",
      }}
    >
      <Card
        style={{
          width: "100%",
          maxWidth: "600px",
          borderRadius: "24px",
          background: "rgba(255, 255, 255, 0.85)",
          backdropFilter: "blur(20px)",
          WebkitBackdropFilter: "blur(20px)",
          border: "1px solid rgba(255, 255, 255, 0.2)",
          boxShadow: "0 25px 50px rgba(0, 0, 0, 0.1)",
        }}
        bodyStyle={{ padding: "40px" }}
      >
        {/* Header */}
        <div style={{ textAlign: "center", marginBottom: "30px" }}>
          <Title
            level={2}
            style={{
              margin: "0 0 8px 0",
              color: "#1E88E5",
              fontWeight: "600",
            }}
          >
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
          </Title>
          <Text style={{ color: "#666", fontSize: "15px" }}>
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì
          </Text>
        </div>

        {/* Form */}
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{ deliveryOption: "coop" }}
        >
          <Form.Item name="deliveryOption">
            <Radio.Group
              style={{ width: "100%" }}
              onChange={(e) => setSelectedOption(e.target.value)}
            >
              <Space direction="vertical" size={16} style={{ width: "100%" }}>
                {deliveryOptions.map((option) => (
                  <Card
                    key={option.value}
                    hoverable
                    style={{
                      borderRadius: "16px",
                      background: "rgba(255, 255, 255, 0.9)",
                      backdropFilter: "blur(10px)",
                      WebkitBackdropFilter: "blur(10px)",
                      border:
                        selectedOption === option.value
                          ? "2px solid #1E88E5"
                          : "1px solid rgba(255, 255, 255, 0.3)",
                      boxShadow:
                        selectedOption === option.value
                          ? "0 12px 32px rgba(30, 136, 229, 0.15)"
                          : "0 8px 24px rgba(0, 0, 0, 0.08)",
                      transition: "all 0.3s ease",
                    }}
                    bodyStyle={{ padding: "20px" }}
                  >
                    <Radio value={option.value} style={{ width: "100%" }}>
                      <div
                        style={{
                          display: "flex",
                          alignItems: "center",
                          gap: "15px",
                        }}
                      >
                        <div
                          style={{
                            color:
                              selectedOption === option.value
                                ? "#1E88E5"
                                : "#757575",
                            filter:
                              selectedOption === option.value
                                ? "grayscale(0)"
                                : "grayscale(0.3)",
                          }}
                        >
                          {option.icon}
                        </div>
                        <div style={{ flex: 1 }}>
                          <div
                            style={{
                              fontWeight:
                                selectedOption === option.value ? "500" : "400",
                              color:
                                selectedOption === option.value
                                  ? "#1E88E5"
                                  : "#333",
                              fontSize: "16px",
                            }}
                          >
                            {option.label}
                          </div>
                          <div
                            style={{
                              fontSize: "14px",
                              color: "#757575",
                              marginTop: "4px",
                            }}
                          >
                            {option.description}
                          </div>
                        </div>
                      </div>

                      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */}
                      {option.value === "system" && (
                        <div
                          style={{
                            marginTop: "12px",
                            padding: "12px 16px",
                            background: "rgba(227, 242, 253, 0.7)",
                            backdropFilter: "blur(10px)",
                            WebkitBackdropFilter: "blur(10px)",
                            borderRadius: "12px",
                            borderLeft: "4px solid #1E88E5",
                            fontSize: "14px",
                            color: "#424242",
                            lineHeight: "1.6",
                            whiteSpace: "pre-line",
                          }}
                        >
                          <strong style={{ color: "#1565C0" }}>
                            ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:
                          </strong>
                          <br />
                          {option.address}
                        </div>
                      )}
                    </Radio>
                  </Card>
                ))}
              </Space>
            </Radio.Group>
          </Form.Item>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà */}
          {selectedOption === "custom" && (
            <>
              <Form.Item
                name="customAddress"
                label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
                rules={[
                  {
                    required: true,
                    message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
                  },
                  {
                    min: 20,
                    message:
                      "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)",
                  },
                ]}
                style={{ marginTop: "16px" }}
              >
                <TextArea
                  placeholder={`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡πà‡∏á\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n99/99 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 4 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏™‡∏µ‡∏•‡∏° ‡πÄ‡∏Ç‡∏ï‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å\n‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ 10500`}
                  rows={5}
                  style={{
                    borderRadius: "12px",
                    border: "2px solid rgba(30, 136, 229, 0.2)",
                    background: "rgba(255, 255, 255, 0.95)",
                    backdropFilter: "blur(10px)",
                    WebkitBackdropFilter: "blur(10px)",
                    fontSize: "15px",
                    transition: "all 0.3s ease",
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = "#1E88E5";
                    e.target.style.boxShadow =
                      "0 4px 12px rgba(30, 136, 229, 0.15)";
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = "rgba(30, 136, 229, 0.2)";
                    e.target.style.boxShadow = "none";
                  }}
                />
              </Form.Item>

              <Form.Item
                name="customPhone"
                label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                rules={[
                  {
                    required: true,
                    message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
                  },
                  {
                    pattern: /^0[0-9]{9}$/,
                    message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 0812345678)",
                  },
                ]}
              >
                <Input
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô 0812345678"
                  maxLength={10}
                  style={{
                    borderRadius: "12px",
                    border: "2px solid rgba(30, 136, 229, 0.2)",
                    background: "rgba(255, 255, 255, 0.95)",
                    backdropFilter: "blur(10px)",
                    WebkitBackdropFilter: "blur(10px)",
                    fontSize: "15px",
                    height: "44px",
                    transition: "all 0.3s ease",
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = "#1E88E5";
                    e.target.style.boxShadow =
                      "0 4px 12px rgba(30, 136, 229, 0.15)";
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = "rgba(30, 136, 229, 0.2)";
                    e.target.style.boxShadow = "none";
                  }}
                />
              </Form.Item>
            </>
          )}

          {/* Submit Button */}
          <Form.Item style={{ marginTop: "30px", marginBottom: 0 }}>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              block
              icon={<CheckCircleOutlined />}
              style={{
                height: "52px",
                fontSize: "17px",
                fontWeight: "600",
                borderRadius: "12px",
                background: "#1E88E5",
                boxShadow: "0 4px 12px rgba(30, 136, 229, 0.3)",
              }}
            >
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"}
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
};

export default RetirementDelivery;
