// src/components/Admin/PickupModal.jsx
import React, { useState, useEffect } from "react";
import { Modal, Button, Radio, Row, Col, Card, message } from "antd";
import { CloseOutlined } from "@ant-design/icons";
import { submitPickup, saveMemberSize } from "../../services/shirtApi";
import { useAppContext } from "../../App";
import "../../styles/PickupModal.css";

const ALL_SIZES = [
  "XS",
  "S",
  "M",
  "L",
  "XL",
  "2XL",
  "3XL",
  "4XL",
  "5XL",
  "6XL",
];

const SIZE_INFO = {
  XS: { chest: '40"', length: '24"' },
  S: { chest: '42"', length: '25"' },
  M: { chest: '44"', length: '26"' },
  L: { chest: '46"', length: '27"' },
  XL: { chest: '48"', length: '28"' },
  "2XL": { chest: '50"', length: '29"' },
  "3XL": { chest: '52"', length: '30"' },
  "4XL": { chest: '54"', length: '31"' },
  "5XL": { chest: '56"', length: '32"' },
  "6XL": { chest: '58"', length: '33"' },
};

const PickupModal = ({ visible, onCancel, selectedMember, onSuccess }) => {
  const { user } = useAppContext();
  const [loading, setLoading] = useState(false);
  const [selectedSize, setSelectedSize] = useState(null);
  const [receiverType, setReceiverType] = useState("SELF");
  const [showSizeGuide, setShowSizeGuide] = useState(false);
  const [actionType, setActionType] = useState("pickup");

  useEffect(() => {
    if (visible && selectedMember) {
      setSelectedSize(selectedMember.sizeCode || selectedMember.SIZE_CODE);
      setReceiverType("SELF");
      setActionType("pickup");
    }
  }, [visible, selectedMember]);

  // ‡∏î‡∏∂‡∏á memberCode ‡∏à‡∏≤‡∏Å user object
  const getAdminCode = () => {
    if (!user) {
      console.warn("‚ö†Ô∏è User object is undefined");
      return "ADMIN";
    }
    return user.memberCode || user.MEMB_CODE || user.mbcode || "ADMIN";
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠)
  const handleSaveSizeOnly = async () => {
    if (!selectedSize) {
      message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠");
      return;
    }

    setLoading(true);
    try {
      const adminCode = getAdminCode();
      const memberCode = selectedMember.memberCode || selectedMember.MEMB_CODE;

      console.log("üíæ Saving size only:", {
        memberCode,
        sizeCode: selectedSize,
        adminCode,
      });

      await saveMemberSize({
        memberCode: memberCode,
        sizeCode: selectedSize,
        remarks: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢ ${adminCode}`,
        surveyMethod: "MANUAL",
      });

      message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      if (onSuccess) {
        onSuccess();
      }
      onCancel();
    } catch (error) {
      console.error("‚ùå Save size error:", error);
      message.error(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠
  const handleSubmitPickup = async () => {
    if (!selectedSize) {
      message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠");
      return;
    }

    setLoading(true);
    try {
      const adminCode = getAdminCode();
      const memberCode = selectedMember.memberCode || selectedMember.MEMB_CODE;

      console.log("üì¶ Submitting pickup:", {
        memberCode,
        sizeCode: selectedSize,
        processedBy: adminCode,
        receiverType,
      });

      await submitPickup({
        memberCode: memberCode,
        sizeCode: selectedSize,
        processedBy: adminCode,
        receiverType: receiverType,
        receiverName: receiverType === "OTHER" ? "‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏ô" : null,
        remarks: "",
      });

      message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      if (onSuccess) {
        onSuccess();
      }
      onCancel();
    } catch (error) {
      console.error("‚ùå Pickup submit error:", error);
      message.error(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    } finally {
      setLoading(false);
    }
  };

  if (!selectedMember) return null;

  const memberCode = selectedMember.memberCode || selectedMember.MEMB_CODE;
  const fullName = selectedMember.fullName || selectedMember.FULLNAME;

  return (
    <>
      <Modal
        open={visible}
        onCancel={onCancel}
        footer={null}
        width={500}
        closeIcon={<CloseOutlined />}
        className="pickup-modal-minimal"
      >
        <div className="pickup-modal-content">
          <h2 className="modal-title">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠</h2>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å */}
          <div className="member-info-grid">
            <div className="info-item">
              <span className="info-label">‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</span>
              <span className="info-value">{memberCode}</span>
            </div>
            <div className="info-item">
              <span className="info-label">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</span>
              <span className="info-value">{fullName}</span>
            </div>
          </div>

          {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î */}
          <div className="section">
            <div className="section-header">
              <span className="section-label">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</span>
              <Button
                type="link"
                size="small"
                onClick={() => setShowSizeGuide(true)}
              >
                üìè ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î
              </Button>
            </div>

            {selectedSize ? (
              <div className="selected-size-display">{selectedSize}</div>
            ) : (
              <div className="no-size-warning">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î</div>
            )}
          </div>

          {/* ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö */}
          <div className="section">
            <span className="section-label">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠</span>
            <Radio.Group
              value={receiverType}
              onChange={(e) => setReceiverType(e.target.value)}
              className="receiver-radio-group"
            >
              <Radio value="SELF">‡∏£‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</Radio>
              <Radio value="OTHER">‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡∏ô</Radio>
            </Radio.Group>
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
          <div className="modal-footer">
            <Button onClick={onCancel} size="large">
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>

            <Button
              size="large"
              onClick={() => {
                setActionType("size-only");
                handleSaveSizeOnly();
              }}
              loading={loading && actionType === "size-only"}
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            </Button>

            <Button
              type="primary"
              size="large"
              onClick={() => {
                setActionType("pickup");
                handleSubmitPickup();
              }}
              loading={loading && actionType === "pickup"}
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ã‡∏î‡πå‡∏ä‡∏≤‡∏£‡πå‡∏ï */}
      <Modal
        open={showSizeGuide}
        onCancel={() => setShowSizeGuide(false)}
        footer={null}
        width={900}
        closeIcon={<CloseOutlined />}
        className="size-guide-modal"
      >
        <div className="size-guide-content">
          <h2 className="modal-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</h2>

          <div style={{ marginBottom: 16, fontSize: 14, color: "#666" }}>
            üìè{" "}
            <a
              href="https://apps2.coop.ku.ac.th/asset/images/png/sizewidth.png"
              target="_blank"
              rel="noopener noreferrer"
            >
              ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠
            </a>
          </div>

          <Row gutter={[16, 16]}>
            {ALL_SIZES.map((size) => (
              <Col xs={12} sm={8} md={6} key={size}>
                <Card
                  hoverable
                  className={`size-card ${
                    selectedSize === size ? "selected" : ""
                  }`}
                  onClick={() => {
                    setSelectedSize(size);
                    setShowSizeGuide(false);
                  }}
                >
                  <div className="size-label">{size}</div>
                  <div className="size-measurements">
                    <div>‡∏≠‡∏Å {SIZE_INFO[size].chest}</div>
                    <div>‡∏¢‡∏≤‡∏ß {SIZE_INFO[size].length}</div>
                  </div>
                </Card>
              </Col>
            ))}
          </Row>

          <div className="size-guide-note">
            <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
            2" ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏à‡πá‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ 40"
            ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠ 42" ‡πÅ‡∏ó‡∏ô
          </div>
        </div>
      </Modal>
    </>
  );
};

export default PickupModal;
