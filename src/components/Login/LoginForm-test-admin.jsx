// src/components/Login/LoginForm.jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Card, Form, Input, Button, Typography, Alert } from "antd";
import {
  UserOutlined,
  PhoneOutlined,
  IdcardOutlined,
  LoginOutlined,
} from "@ant-design/icons";
import Swal from "sweetalert2";

import { useAppContext } from "../../App";
import { loginMember } from "../../services/shirtApi";

const { Title, Paragraph } = Typography;

const LoginForm = () => {
  const navigate = useNavigate();
  const { login } = useAppContext();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  const initialValues = {
    memberCode: "012938",
     phone: "9999999999",
     idCard: "999",
  };

  const handleLogin = async (values) => {
    setLoading(true);

    try {
      console.log("üîê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...");
      const memberData = await loginMember({
        memberCode: values.memberCode ,//|| "012938",
        phone: "0812681022",//values.phone || 
        idCard:  "952",//values.idCard ||
      });

      console.log("‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:", memberData);

      if (memberData) {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role (default: member)
        let userRole = "member";
        let userType = "member";

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (
          memberData.memberCode === "012938" ||
          memberData.memberCode === "999999" ||
          memberData.userRole === "admin"
        ) {
          userRole = "admin";
          userType = "admin";
        }

        console.log("üë§ userRole:", userRole, "userType:", userType);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á user object ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
        const userData = {
          memberCode: memberData.memberCode,
          name: memberData.name,
          fullName: memberData.fullName,
          displayName: memberData.displayName,
          phone: memberData.phone,
          idCard: memberData.socialId,
          role: userRole,
          sizeCode: memberData.sizeCode, // ‡πÉ‡∏ä‡πâ sizeCode ‡πÅ‡∏ó‡∏ô selectedSize
          surveyDate: memberData.surveyDate,
          surveyMethod: memberData.surveyMethod,
          updatedDate: memberData.updatedDate,
          remarks: memberData.remarks,
          
          // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏∑‡πâ‡∏≠
          hasReceived: memberData.hasReceived || false,
          receiveStatus: memberData.receiveStatus,
          receiveDate: memberData.receiveDate,
          receiverType: memberData.receiverType,
          receiverName: memberData.receiverName,
          processedBy: memberData.processedBy,
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà MemberPortal ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (backward compatibility)
          MEMB_CODE: memberData.memberCode,
          DISPLAYNAME: memberData.displayName || memberData.name,
          FULLNAME: memberData.fullName,
          MEMB_MOBILE: memberData.phone,
          MEMB_SOCID: memberData.socialId,
          SIZE_CODE: memberData.sizeCode,
          SURVEY_DATE: memberData.surveyDate,
          SURVEY_METHOD: memberData.surveyMethod,
          REMARKS: memberData.remarks,
          USER_ROLE: userRole,
          
          // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö uppercase (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility)
          PROCESSED_BY: memberData.processedBy,
          RECEIVER_NAME: memberData.receiverName,
          RECEIVER_TYPE: memberData.receiverType,
          RECEIVE_DATE: memberData.receiveDate,
          RECEIVE_STATUS: memberData.receiveStatus,
          UPDATED_DATE: memberData.updatedDate,
        };

        console.log("üíæ Final userData:", userData);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô context
        login(userData, userType);

        // ‡πÅ‡∏™‡∏î‡∏á success message
        await Swal.fire({
          icon: "success",
          title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${memberData.displayName || memberData.name}`,
          timer: 2000,
          showConfirmButton: false,
        });

        // üî• FLOW ‡πÄ‡∏î‡∏¥‡∏°: Navigate ‡∏ï‡∏≤‡∏° role
        if (userType === "admin") {
          navigate("/admin");
        } else {
          navigate("/member"); // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Survey (‡πÄ‡∏î‡∏¥‡∏°)
        }
      } else {
        throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
    } catch (error) {
      console.error("‚ùå Login Error:", error);

      await Swal.fire({
        icon: "error",
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ",
        text: error.message || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        confirmButtonText: "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        confirmButtonColor: "#007AFF",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <Card
        style={{
          width: "100%",
          maxWidth: "400px",
          borderRadius: "24px",
          boxShadow:
            "0 25px 50px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.1) inset",
          background: "rgba(255, 255, 255, 0.95)",
          border: "1px solid rgba(255, 255, 255, 0.2)",
        }}
      >
        {/* Header */}
        <div style={{ textAlign: "center", marginBottom: "24px" }}>
          <Title
            level={2}
            style={{
              margin: "0 0 8px 0",
              color: "#007AFF",
              fontWeight: "700",
            }}
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
          </Title>
          <Paragraph style={{ color: "#48484a", margin: 0, fontSize: "15px" }}>
            ‡∏à‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏à‡πá‡∏Å‡πÄ‡∏Å‡πá‡∏ï ‡∏™‡∏≠.‡∏°‡∏Å.
          </Paragraph>
        </div>

        {/* Form */}
        <Form
          form={form}
          layout="vertical"
          onFinish={handleLogin}
          size="large"
          initialValues={initialValues}
        >
          <Form.Item
            name="memberCode"
            label="‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
            rules={[
              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" },
              { pattern: /^\d+$/, message: "‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" },
              { max: 6, message: "‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡∏ï‡∏±‡∏ß" },
            ]}
          >
            <Input
              prefix={<UserOutlined style={{ color: "#007AFF" }} />}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡∏ï‡∏±‡∏ß)"
              maxLength={6}
            />
          </Form.Item>

          <Form.Item
            name="phone"
            label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
            rules={[
              { required: true, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" },
              { len: 10, message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 10 ‡∏´‡∏•‡∏±‡∏Å" },
              {
                pattern: /^\d+$/,
                message: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
              },
            ]}
          >
            <Input
              prefix={<PhoneOutlined style={{ color: "#007AFF" }} />}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 10 ‡∏´‡∏•‡∏±‡∏Å"
              maxLength={10}
            />
          </Form.Item>

          <Form.Item
            name="idCard"
            label="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 3 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
            rules={[
              {
                required: true,
                message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô 3 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢",
              },
              { len: 3, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å 3 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢" },
              { pattern: /^\d+$/, message: "‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" },
            ]}
          >
            <Input
              prefix={<IdcardOutlined style={{ color: "#007AFF" }} />}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å 3 ‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
              maxLength={3}
            />
          </Form.Item>

          <Form.Item style={{ marginTop: "32px" }}>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              block
              icon={<LoginOutlined />}
              style={{
                height: "52px",
                fontSize: "16px",
                fontWeight: "600",
                borderRadius: "14px",
              }}
            >
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..." : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"}
            </Button>
          </Form.Item>
        </Form>
      </Card>
    </div>
  );
};

export default LoginForm;